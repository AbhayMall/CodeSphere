<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeSphere - Developer Community</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        header, footer {
            background-color: #126fcc;
            color: white;
            text-align: center;
            padding: 1rem 0;
        }
        
        main {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .hero {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        
        .highlight {
            color: #4361ee;
        }
        
        .content h2 {
            margin: 2rem 0 1rem;
            border-bottom: 2px solid #4361ee;
            padding-bottom: 0.5rem;
        }
        
        /* Community Styles */
        .community-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }
        
        @media (max-width: 768px) {
            .community-section {
                grid-template-columns: 1fr;
            }
        }
        
        .comment-form {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .comment-form h3 {
            margin-bottom: 1rem;
            color: #2c3e50;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: 'Poppins', sans-serif;
        }
        
        textarea.form-control {
            min-height: 150px;
            resize: vertical;
        }
        
        .btn {
            background-color: #4361ee;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s;
        }
        
        .btn:hover {
            background-color: #3a56d4;
        }
        
        .topic-selector {
            margin-bottom: 1.5rem;
        }
        
        .topic-selector label {
            margin-right: 0.5rem;
        }
        
        .topic-btn {
            background-color: #f5f7fa;
            border: 1px solid #ddd;
            padding: 0.5rem 1rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .topic-btn.active {
            background-color: #4361ee;
            color: white;
            border-color: #4361ee;
        }
        
        .comments-section {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .comments-section h3 {
            margin-bottom: 1rem;
            color: #2c3e50;
        }
        
        .comments-filter {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .filter-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 600;
            padding: 0.5rem 0;
            color: #666;
            border-bottom: 2px solid transparent;
        }
        
        .filter-btn.active {
            color: #4361ee;
            border-bottom: 2px solid #4361ee;
        }
        
        .comments-list {
            max-height: 600px;
            overflow-y: auto;
        }
        
        .comment {
            border-bottom: 1px solid #eee;
            padding: 1.5rem 0;
        }
        
        .comment:last-child {
            border-bottom: none;
        }
        
        .comment-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }
        
        .comment-user {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .comment-meta {
            color: #888;
            font-size: 0.9rem;
        }
        
        .comment-topic {
            display: inline-block;
            background-color: #f5f7fa;
            padding: 0.2rem 0.5rem;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-right: 0.5rem;
        }
        
        .comment-content {
            line-height: 1.6;
            margin-top: 0.5rem;
        }
        
        .comment-actions {
            margin-top: 0.5rem;
            display: flex;
            gap: 1rem;
        }
        
        .comment-action {
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.9rem;
        }
        
        .comment-action:hover {
            color: #4361ee;
        }
        
        .featured-discussions {
            margin-top: 3rem;
            padding: 2rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .featured-discussions h2 {
            border-bottom: 2px solid #4361ee;
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
        }
        
        .discussion-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
        }
        
        .discussion-card {
            border: 1px solid #eee;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .discussion-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        
        .discussion-header {
            padding: 1rem;
            background-color: #f5f7fa;
            border-bottom: 1px solid #eee;
        }
        
        .discussion-title {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .discussion-body {
            padding: 1rem;
        }
        
        .discussion-meta {
            display: flex;
            justify-content: space-between;
            color: #888;
            font-size: 0.9rem;
            margin-top: 1rem;
        }
        
        .community-guidelines {
            padding: 1.5rem;
            background-color: #f5f7fa;
            border-radius: 8px;
            margin: 3rem 0;
        }
        
        .community-guidelines h2 {
            margin-top: 0;
        }
        
        .community-guidelines ul {
            list-style-type: disc;
            padding-left: 1.5rem;
            margin-top: 1rem;
        }
        
        .community-guidelines li {
            margin-bottom: 0.5rem;
        }
        
        /* Notification */
        .notification {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            padding: 1rem;
            background-color: #4361ee;
            color: white;
            border-radius: 4px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: none;
            z-index: 1000;
            animation: slideIn 0.3s forwards;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body>
    <header>
        <h1>CodeSphere</h1>
        
    </header>
    
    <main>
        <section class="hero">
            <h1>Developer <span class="highlight">Community</span></h1>
            <p>Connect with fellow developers, share insights, and discuss coding challenges</p>
        </section>
        
        <section class="content">
            <div class="community-section">
                <div class="comment-form">
                    <h3>Start a Discussion</h3>
                    <form id="commentForm">
                        <div class="form-group">
                            <label for="username">Your Name</label>
                            <input type="text" id="username" class="form-control" required>
                        </div>
                        
                        <div class="topic-selector">
                            <label>Select Topic:</label>
                            <div class="topic-buttons">
                                <button type="button" class="topic-btn" data-topic="JavaScript">JavaScript</button>
                                <button type="button" class="topic-btn" data-topic="Python">Python</button>
                                <button type="button" class="topic-btn" data-topic="Web Dev">Web Dev</button>
                                <button type="button" class="topic-btn" data-topic="Algorithms">Algorithms</button>
                                <button type="button" class="topic-btn active" data-topic="General">General</button>
                            </div>
                            <input type="hidden" id="selectedTopic" value="General">
                        </div>
                        
                        <div class="form-group">
                            <label for="commentTitle">Title</label>
                            <input type="text" id="commentTitle" class="form-control" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="commentContent">Your Question/Discussion</label>
                            <textarea id="commentContent" class="form-control" required></textarea>
                        </div>
                        
                        <button type="submit" class="btn">Post Discussion</button>
                    </form>
                </div>
                
                <div class="comments-section">
                    <h3>Recent Discussions</h3>
                    
                    <div class="comments-filter">
                        <button class="filter-btn active" data-filter="all">All Topics</button>
                        <button class="filter-btn" data-filter="JavaScript">JavaScript</button>
                        <button class="filter-btn" data-filter="Python">Python</button>
                        <button class="filter-btn" data-filter="Web Dev">Web Dev</button>
                        <button class="filter-btn" data-filter="Algorithms">Algorithms</button>
                        <button class="filter-btn" data-filter="General">General</button>
                    </div>
                    
                    <div class="comments-list" id="commentsList">
                        <!-- Comments will be loaded here -->
                    </div>
                </div>
            </div>
            
            <section class="featured-discussions">
                <h2>Popular Discussions</h2>
                
                <div class="discussion-cards">
                    <div class="discussion-card">
                        <div class="discussion-header">
                            <div class="discussion-title">React vs Vue in 2025</div>
                        </div>
                        <div class="discussion-body">
                            <p>Which framework would you recommend for new projects in 2025? React seems more popular but Vue 3's composition API looks promising.</p>
                            <div class="discussion-meta">
                                <span>42 comments</span>
                                <span>2 days ago</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="discussion-card">
                        <div class="discussion-header">
                            <div class="discussion-title">Optimizing Python Performance</div>
                        </div>
                        <div class="discussion-body">
                            <p>What are your best tips for improving Python performance in data-intensive applications? I'm considering Cython or PyPy but would love to hear experiences.</p>
                            <div class="discussion-meta">
                                <span>28 comments</span>
                                <span>5 days ago</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="discussion-card">
                        <div class="discussion-header">
                            <div class="discussion-title">DSA Learning Path</div>
                        </div>
                        <div class="discussion-body">
                            <p>What's the most effective way to learn Data Structures and Algorithms for coding interviews? Should I focus on theory first or jump into LeetCode problems?</p>
                            <div class="discussion-meta">
                                <span>56 comments</span>
                                <span>1 week ago</span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            
            <section class="community-guidelines">
                <h2>Community Guidelines</h2>
                <ul>
                    <li>Be respectful to all members of the community</li>
                    <li>Share code snippets using proper formatting</li>
                    <li>No spamming or self-promotion</li>
                    <li>Clearly describe your problem when asking for help</li>
                    <li>Help others when you can</li>
                    <li>Report inappropriate content to moderators</li>
                </ul>
            </section>
        </section>
    </main>
    
    <footer>
        <p>&copy; 2025 CodeSphere - All Rights Reserved</p>
    </footer>
    
    <div class="notification" id="notification">Discussion posted successfully!</div>
    
    <script>
        // Store comments in localStorage
        let comments = JSON.parse(localStorage.getItem('devComments')) || [];
        let currentFilter = 'all';
        
        // Topic selection
        document.querySelectorAll('.topic-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.topic-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                document.getElementById('selectedTopic').value = this.getAttribute('data-topic');
            });
        });
        
        // Filter buttons
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentFilter = this.getAttribute('data-filter');
                displayComments();
            });
        });
        
        // Comment form submission
        document.getElementById('commentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const topic = document.getElementById('selectedTopic').value;
            const title = document.getElementById('commentTitle').value;
            const content = document.getElementById('commentContent').value;
            
            // Create new comment object
            const newComment = {
                id: Date.now(),
                username: username,
                topic: topic,
                title: title,
                content: content,
                timestamp: new Date().toISOString(),
                likes: 0,
                replies: []
            };
            
            // Add comment to array
            comments.unshift(newComment);
            
            // Save to localStorage
            localStorage.setItem('devComments', JSON.stringify(comments));
            
            // Reset form
            document.getElementById('commentForm').reset();
            document.querySelectorAll('.topic-btn').forEach(b => b.classList.remove('active'));
            document.querySelector('.topic-btn[data-topic="General"]').classList.add('active');
            document.getElementById('selectedTopic').value = 'General';
            
            // Show notification
            const notification = document.getElementById('notification');
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
            
            // Refresh comments display
            displayComments();
        });
        
        // Function to display comments based on filter
        function displayComments() {
            const commentsList = document.getElementById('commentsList');
            commentsList.innerHTML = '';
            
            const filteredComments = currentFilter === 'all' 
                ? comments 
                : comments.filter(comment => comment.topic === currentFilter);
            
            if (filteredComments.length === 0) {
                commentsList.innerHTML = '<p>No discussions yet. Start the conversation!</p>';
                return;
            }
            
            filteredComments.forEach(comment => {
                const commentDate = new Date(comment.timestamp);
                const formattedDate = formatDate(commentDate);
                
                const commentElement = document.createElement('div');
                commentElement.className = 'comment';
                commentElement.innerHTML = `
                    <div class="comment-header">
                        <span class="comment-user">${comment.username}</span>
                        <span class="comment-meta">${formattedDate}</span>
                    </div>
                    <div>
                        <span class="comment-topic">${comment.topic}</span>
                        <strong>${comment.title}</strong>
                    </div>
                    <div class="comment-content">${comment.content}</div>
                    <div class="comment-actions">
                        <button class="comment-action like-btn" data-id="${comment.id}">
                            <span class="like-icon">👍</span> <span class="like-count">${comment.likes}</span>
                        </button>
                        <button class="comment-action reply-btn" data-id="${comment.id}">
                            Reply
                        </button>
                    </div>
                `;
                
                commentsList.appendChild(commentElement);
            });
            
            // Add like button functionality
            document.querySelectorAll('.like-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const commentId = parseInt(this.getAttribute('data-id'));
                    const comment = comments.find(c => c.id === commentId);
                    if (comment) {
                        comment.likes++;
                        localStorage.setItem('devComments', JSON.stringify(comments));
                        this.querySelector('.like-count').textContent = comment.likes;
                    }
                });
            });
        }
        
        // Format date function
        function formatDate(date) {
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) {
                return 'just now';
            } else if (diffInSeconds < 3600) {
                const minutes = Math.floor(diffInSeconds / 60);
                return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;
            } else if (diffInSeconds < 86400) {
                const hours = Math.floor(diffInSeconds / 3600);
                return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;
            } else if (diffInSeconds < 604800) {
                const days = Math.floor(diffInSeconds / 86400);
                return `${days} ${days === 1 ? 'day' : 'days'} ago`;
            } else {
                return date.toLocaleDateString();
            }
        }
        
        // Initial display of comments
        displayComments();
        
        // To simulate some existing comments for demonstration purposes
        // Remove this in a production environment
        if (comments.length === 0) {
            const demoComments = [
                {
                    id: 1680000000000,
                    username: "CodeMaster",
                    topic: "JavaScript",
                    title: "ES2025 Features Preview",
                    content: "Has anyone experimented with the upcoming JavaScript features? The new pattern matching syntax looks particularly interesting for simplifying complex conditionals. What are your thoughts on its potential applications?",
                    timestamp: new Date(Date.now() - 86400000 * 2).toISOString(), // 2 days ago
                    likes: 12,
                    replies: []
                },
                {
                    id: 1680000000001,
                    username: "PythonDev",
                    topic: "Python",
                    title: "Async Best Practices",
                    content: "I'm working on a Python project that requires heavy I/O operations. I've started using async/await but I'm not sure about the best practices for error handling and task management in larger applications. Any advice from experienced async Python developers?",
                    timestamp: new Date(Date.now() - 86400000 * 4).toISOString(), // 4 days ago
                    likes: 8,
                    replies: []
                },
                {
                    id: 1680000000002,
                    username: "WebDesigner",
                    topic: "Web Dev",
                    title: "CSS Grid vs Flexbox",
                    content: "When should I prefer CSS Grid over Flexbox for layout? I understand the basic differences but I'm looking for practical guidelines on when to choose one over the other in real projects.",
                    timestamp: new Date(Date.now() - 86400000 * 5).toISOString(), // 5 days ago
                    likes: 15,
                    replies: []
                },
                {
                    id: 1680000000003,
                    username: "AlgoExpert",
                    topic: "Algorithms",
                    title: "Optimizing Dijkstra's Algorithm",
                    content: "I'm implementing Dijkstra's algorithm for a routing application. The basic version works but I need to optimize it for large graphs. What are the best data structures to use for the priority queue in modern JavaScript?",
                    timestamp: new Date(Date.now() - 86400000 * 7).toISOString(), // 7 days ago
                    likes: 21,
                    replies: []
                }
            ];
            
            comments = demoComments;
            localStorage.setItem('devComments', JSON.stringify(comments));
            displayComments();
        }
    </script>
</body>
</html>