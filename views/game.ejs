<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DSA Practice Game - CodeSphere</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-hover: #3a56d4;
            --text-dark: #1e293b;
            --text-light: #64748b;
            --bg-light: #f8fafc;
            --border-color: #e2e8f0;
            --correct-color: #4ade80;
            --incorrect-color: #f87171;
            --bronze-color: #cd7f32;
            --silver-color: #a1a1aa;
            --gold-color: #facc15;
            --diamond-color: #60a5fa;
        }
        
        body {
            background-color: white;
            color: var(--text-dark);
            font-family: 'Poppins', sans-serif;
            min-height: 100vh;
            padding: 20px;
            margin: 0;
        }
        
        .game-container {
            background-color: white;
            padding: 2.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            border: 1px solid var(--border-color);
        }
        
        .header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .header i {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }
        
        .header h2 {
            font-weight: 700;
            margin: 0;
            color: var(--text-dark);
        }
        
        .progress-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .progress-bar {
            height: 10px;
            background-color: var(--bg-light);
            border-radius: 5px;
            flex-grow: 1;
            margin: 0 1rem;
        }
        
        .progress-fill {
            height: 100%;
            border-radius: 5px;
            background-color: var(--primary-color);
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .score-display {
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .streak-display {
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .question-container {
            background-color: var(--bg-light);
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border-color);
        }
        
        .code-block {
            background-color: #1e293b;
            color: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            margin-bottom: 1rem;
            position: relative;
            overflow-x: auto;
        }
        
        .blank {
            background-color: #334155;
            color: transparent;
            border-bottom: 2px dashed #64748b;
            padding: 0 0.2rem;
            border-radius: 4px;
            position: relative;
        }
        
        .blank::after {
            content: '?';
            color: #f8fafc;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
        }
        
        .answer-input {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            font-family: 'Courier New', monospace;
            margin-bottom: 1rem;
        }
        
        .answer-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.15);
        }
        
        .btn-submit {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px;
            font-size: 1rem;
            font-weight: 600;
            width: 100%;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .btn-submit:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(67, 97, 238, 0.2);
        }
        
        .feedback {
            display: none;
            padding: 1rem;
            border-radius: 8px;
            margin-top: 1rem;
            font-weight: 600;
        }
        
        .correct {
            background-color: var(--correct-color);
            color: white;
            display: block;
        }
        
        .incorrect {
            background-color: var(--incorrect-color);
            color: white;
            display: block;
        }
        
        .badges {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .badge {
            font-size: 2rem;
            opacity: 0.3;
            transition: opacity 0.3s ease;
        }
        
        .badge.active {
            opacity: 1;
        }
        
        .bronze {
            color: var(--bronze-color);
        }
        
        .silver {
            color: var(--silver-color);
        }
        
        .gold {
            color: var(--gold-color);
        }
        
        .diamond {
            color: var(--diamond-color);
        }
        
        .result-container {
            text-align: center;
            display: none;
        }
        
        .result-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        
        .final-score {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        
        .btn-restart {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 1rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }
        
        .btn-restart:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(67, 97, 238, 0.2);
        }
        
        .earned-badges-container {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.75rem;
            margin: 1rem 0;
            padding: 0.5rem;
            background-color: var(--bg-light);
            border-radius: 8px;
            border: 1px dashed var(--border-color);
        }
        
        .earned-badge {
            font-size: 1.5rem;
            opacity: 1;
        }
        
        .earned-badges-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text-light);
            margin-right: 0.5rem;
        }
        
        .no-badges {
            font-size: 0.9rem;
            color: var(--text-light);
            font-style: italic;
        }
        
        .badge-animation {
            animation: badge-pulse 1s ease;
        }
        
        @keyframes badge-pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.3); }
            100% { transform: scale(1); }
        }
        
        /* Badge tooltip */
        .badge-tooltip {
            position: relative;
            display: inline-block;
        }
        
        .badge-tooltip .tooltip-text {
            visibility: hidden;
            width: 120px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.75rem;
        }
        
        .badge-tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <i class="fas fa-gamepad"></i>
            <h2>DSA Practice Game</h2>
            <p>Fill in the missing keywords to complete the code</p>
        </div>
        
        <div class="earned-badges-container" id="earned-badges">
            <span class="earned-badges-title">Earned Badges:</span>
            <span class="no-badges">None yet. Keep going!</span>
        </div>
        
        <div class="progress-container">
            <span class="score-display">Score: <span id="score">0</span></span>
            <div class="progress-bar">
                <div class="progress-fill" id="progress"></div>
            </div>
            <span class="streak-display">Streak: <span id="streak">0</span></span>
        </div>
        
        <div class="badges">
            <div class="badge-tooltip">
                <i class="fas fa-medal bronze badge" id="bronze-badge"></i>
                <span class="tooltip-text">Bronze - 5 correct in a row</span>
            </div>
            <div class="badge-tooltip">
                <i class="fas fa-award silver badge" id="silver-badge"></i>
                <span class="tooltip-text">Silver - 10 correct in a row</span>
            </div>
            <div class="badge-tooltip">
                <i class="fas fa-award gold badge" id="gold-badge"></i>
                <span class="tooltip-text">Gold - 15 correct in a row</span>
            </div>
            <div class="badge-tooltip">
                <i class="fas fa-gem diamond badge" id="diamond-badge"></i>
                <span class="tooltip-text">Diamond - 20 correct in a row</span>
            </div>
        </div>
        
        <div id="game-area">
            <div class="question-container">
                <h4 id="question-number">Question 1/30</h4>
                <div class="code-block" id="code-block"></div>
                <input type="text" class="answer-input" id="answer-input" placeholder="Enter the missing keyword...">
                <button class="btn-submit" id="submit-btn">Submit</button>
                <div class="feedback" id="feedback"></div>
            </div>
        </div>
        
        <div class="result-container" id="result-container">
            <h2 class="result-title">Game Completed!</h2>
            <div class="final-score" id="final-score">Your Score: 0</div>
            <div id="badges-earned"></div>
            <button class="btn-restart" id="restart-btn">Play Again</button>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // Game data - DSA questions with missing keywords
            const questions = [
                {
                    code: `function binarySearch(arr, target) {
    let left = 0;
    let right = arr.length - 1;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if (arr[mid] === target) {
            return mid;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return <span class="blank" data-answer="\-1">_____</span>;
}`,
                    answer: "-1"
                },
                {
                    code: `class Node {
    constructor(value) {
        this.value = value;
        this.next = <span class="blank" data-answer="null">_____</span>;
    }
}`,
                    answer: "null"
                },
                {
                    code: `function bubbleSort(arr) {
    let n = arr.length;
    
    for (let i = 0; i < n - 1; i++) {
        for (let j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = <span class="blank" data-answer="temp">_____</span>;
            }
        }
    }
    
    return arr;
}`,
                    answer: "temp"
                },
                {
                    code: `function factorial(n) {
    if (n === 0 || n === 1) {
        return <span class="blank" data-answer="1">_____</span>;
    }
    return n * factorial(n - 1);
}`,
                    answer: "1"
                },
                {
                    code: `function isPalindrome(str) {
    let left = 0;
    let right = str.length - 1;
    
    while (left < right) {
        if (str[left] !== str[right]) {
            return <span class="blank" data-answer="false">_____</span>;
        }
        left++;
        right--;
    }
    
    return true;
}`,
                    answer: "false"
                },
                {
                    code: `class Stack {
    constructor() {
        this.items = [];
    }
    
    push(element) {
        this.items.<span class="blank" data-answer="push">_____</span>(element);
    }
}`,
                    answer: "push"
                },
                {
                    code: `function fibonacci(n) {
    if (n <= 1) {
        return <span class="blank" data-answer="n">_____</span>;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}`,
                    answer: "n"
                },
                {
                    code: `function reverseString(str) {
    return str.split('').<span class="blank" data-answer="reverse">_____</span>().join('');
}`,
                    answer: "reverse"
                },
                {
                    code: `function linearSearch(arr, target) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === target) {
            return <span class="blank" data-answer="i">_____</span>;
        }
    }
    return -1;
}`,
                    answer: "i"
                },
                {
                    code: `class Queue {
    constructor() {
        this.items = [];
    }
    
    enqueue(element) {
        this.items.<span class="blank" data-answer="push">_____</span>(element);
    }
}`,
                    answer: "push"
                },
                {
                    code: `function isPrime(n) {
    if (n <= 1) return false;
    for (let i = 2; i <= Math.<span class="blank" data-answer="sqrt">_____</span>(n); i++) {
        if (n % i === 0) return false;
    }
    return true;
}`,
                    answer: "sqrt"
                },
                {
                    code: `function mergeSort(arr) {
    if (arr.length <= 1) {
        return <span class="blank" data-answer="arr">_____</span>;
    }
    // ... rest of merge sort implementation
}`,
                    answer: "arr"
                },
                {
                    code: `function TreeNode(value) {
    this.value = value;
    this.left = <span class="blank" data-answer="null">_____</span>;
    this.right = null;
}`,
                    answer: "null"
                },
                {
                    code: `function quickSort(arr) {
    if (arr.length <= 1) return arr;
    
    const pivot = arr[0];
    const left = [];
    const right = [];
    
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] < pivot) {
            left.<span class="blank" data-answer="push">_____</span>(arr[i]);
        } else {
            right.push(arr[i]);
        }
    }
    
    return [...quickSort(left), pivot, ...quickSort(right)];
}`,
                    answer: "push"
                },
                {
                    code: `function depthFirstSearch(node, target) {
    if (node === null) return false;
    if (node.value === target) return true;
    
    return depthFirstSearch(node.left, target) || 
           depthFirstSearch(node.<span class="blank" data-answer="right">_____</span>, target);
}`,
                    answer: "right"
                },
                {
                    code: `function Graph() {
    this.vertices = [];
    this.adjacencyList = new <span class="blank" data-answer="Map">_____</span>();
}`,
                    answer: "Map"
                },
                {
                    code: `function breadthFirstSearch(startNode, target) {
    const queue = [startNode];
    const visited = new <span class="blank" data-answer="Set">_____</span>();
    
    while (queue.length > 0) {
        const currentNode = queue.shift();
        if (currentNode.value === target) return true;
        visited.add(currentNode);
        
        // Add neighbors to queue
        currentNode.neighbors.forEach(neighbor => {
            if (!visited.has(neighbor)) {
                queue.push(neighbor);
            }
        });
    }
    
    return false;
}`,
                    answer: "Set"
                },
                {
                    code: `function dijkstra(graph, start) {
    const distances = {};
    const priorityQueue = new <span class="blank" data-answer="PriorityQueue">_____</span>();
    
    // ... rest of Dijkstra's algorithm
}`,
                    answer: "PriorityQueue"
                },
                {
                    code: `function knapsack(values, weights, capacity) {
    const n = values.length;
    const dp = Array(n + 1).fill().map(() => Array(capacity + 1).fill(0));
    
    for (let i = 1; i <= n; i++) {
        for (let w = 1; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = Math.max(
                    values[i - 1] + dp[i - 1][w - weights[i - 1]], 
                    dp[i - 1][w]
                );
            } else {
                dp[i][w] = dp[i - 1][<span class="blank" data-answer="w">_____</span>];
            }
        }
    }
    
    return dp[n][capacity];
}`,
                    answer: "w"
                },
                {
                    code: `function longestCommonSubsequence(text1, text2) {
    const m = text1.length;
    const n = text2.length;
    const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));
    
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (text1[i - 1] === text2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - <span class="blank" data-answer="1">_____</span>]);
            }
        }
    }
    
    return dp[m][n];
}`,
                    answer: "1"
                },
                {
                    code: `function findMax(arr) {
    if (arr.length === 0) return null;
    
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[<span class="blank" data-answer="i">_____</span>];
        }
    }
    
    return max;
}`,
                    answer: "i"
                },
                {
                    code: `function countSort(arr) {
    const max = Math.max(...arr);
    const count = Array(max + 1).fill(<span class="blank" data-answer="0">_____</span>);
    
    // Count occurrences
    for (let i = 0; i < arr.length; i++) {
        count[arr[i]]++;
    }
    
    // Reconstruct array
    const sorted = [];
    for (let i = 0; i <= max; i++) {
        for (let j = 0; j < count[i]; j++) {
            sorted.push(i);
        }
    }
    
    return sorted;
}`,
                    answer: "0"
                },
                {
                    code: `function insertionSort(arr) {
    for (let i = 1; i < arr.length; i++) {
        let current = arr[i];
        let j = i - 1;
        
        while (j >= 0 && arr[j] > current) {
            arr[j + 1] = arr[<span class="blank" data-answer="j">_____</span>];
            j--;
        }
        
        arr[j + 1] = current;
    }
    
    return arr;
}`,
                    answer: "j"
                },
                {
                    code: `function selectionSort(arr) {
    const n = arr.length;
    
    for (let i = 0; i < n - 1; i++) {
        let minIndex = i;
        
        for (let j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = <span class="blank" data-answer="j">_____</span>;
            }
        }
        
        // Swap
        if (minIndex !== i) {
            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
        }
    }
    
    return arr;
}`,
                    answer: "j"
                },
                {
                    code: `function towerOfHanoi(n, source, auxiliary, destination) {
    if (n === 1) {
        console.log(\`Move disk 1 from \${source} to \${destination}\`);
        return;
    }
    
    towerOfHanoi(n - 1, source, destination, auxiliary);
    console.log(\`Move disk \${n} from \${source} to \${destination}\`);
    towerOfHanoi(n - 1, <span class="blank" data-answer="auxiliary">_____</span>, source, destination);
}`,
                    answer: "auxiliary"
                },
                {
                    code: `function TrieNode() {
    this.children = {};
    this.isEndOfWord = <span class="blank" data-answer="false">_____</span>;
}`,
                    answer: "false"
                },
                {
                    code: `class HashTable {
    constructor(size = 53) {
        this.table = new Array(size);
        this.size = size;
    }
    
    _hash(key) {
        let hash = 0;
        for (let i = 0; i < key.length; i++) {
            hash = (hash + key.charCodeAt(i) * i) % <span class="blank" data-answer="this.size">_____</span>;
        }
        return hash;
    }
}`,
                    answer: "this.size"
                },
                {
                    code: `function gcd(a, b) {
    if (b === 0) {
        return <span class="blank" data-answer="a">_____</span>;
    }
    return gcd(b, a % b);
}`,
                    answer: "a"
                },
                {
                    code: `function lcm(a, b) {
    return (a * b) / <span class="blank" data-answer="gcd$$a\, b$$">_____</span>;
}`,
                    answer: "gcd(a, b)"
                },
                {
                    code: `class UnionFind {
    constructor(size) {
        this.parent = new Array(size);
        for (let i = 0; i < size; i++) {
            this.parent[i] = <span class="blank" data-answer="i">_____</span>;
        }
    }
}`,
                    answer: "i"
                },
                {
                    code: `function power(x, n) {
    if (n === 0) {
        return <span class="blank" data-answer="1">_____</span>;
    }
    
    if (n % 2 === 0) {
        const half = power(x, n / 2);
        return half * half;
    } else {
        return x * power(x, n - 1);
    }
}`,
                    answer: "1"
                },
                {
                    code: `function heapify(arr, n, i) {
    let largest = i;
    let left = 2 * i + 1;
    let right = 2 * i + <span class="blank" data-answer="2">_____</span>;
    
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }
    
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }
    
    if (largest !== i) {
        [arr[i], arr[largest]] = [arr[largest], arr[i]];
        heapify(arr, n, largest);
    }
}`,
                    answer: "2"
                }
            ];
            
            // Game state variables
            let currentQuestionIndex = 0;
            let score = 0;
            let streak = 0;
            let maxStreak = 0;
            let earnedBadges = [];
            let consecutiveCorrect = 0;
            
            // Badge thresholds
            const BRONZE_THRESHOLD = 5;
            const SILVER_THRESHOLD = 10;
            const GOLD_THRESHOLD = 15;
            const DIAMOND_THRESHOLD = 20;
            
            // Initialize game
            function initGame() {
                currentQuestionIndex = 0;
                score = 0;
                streak = 0;
                maxStreak = 0;
                earnedBadges = [];
                consecutiveCorrect = 0;
                
                // Reset UI
                $("#score").text(score);
                $("#streak").text(streak);
                $("#progress").css("width", "0%");
                
                // Reset badges
                $(".badge").removeClass("active");
                
                // Reset earned badges display
                $("#earned-badges").html('<span class="earned-badges-title">Earned Badges:</span><span class="no-badges">None yet. Keep going!</span>');
                
                // Show game area, hide results
                $("#game-area").show();
                $("#result-container").hide();
                
                // Load first question
                loadQuestion();
            }
            
            // Load current question
            function loadQuestion() {
                if (currentQuestionIndex < questions.length) {
                    const question = questions[currentQuestionIndex];
                    
                    // Update question number
                    $("#question-number").text(`Question ${currentQuestionIndex + 1}/${questions.length}`);
                    
                    // Update code block
                    $("#code-block").html(question.code);
                    
                    // Clear input and feedback
                    $("#answer-input").val("");
                    $("#feedback").removeClass("correct incorrect").hide().text("");
                    
                    // Update progress bar
                    const progressPercent = (currentQuestionIndex / questions.length) * 100;
                    $("#progress").css("width", `${progressPercent}%`);
                    
                    // Focus on input
                    $("#answer-input").focus();
                } else {
                    // Game completed
                    endGame();
                }
            }
            
            // Check answer
            function checkAnswer() {
                const currentQuestion = questions[currentQuestionIndex];
                const userAnswer = $("#answer-input").val().trim();
                const correctAnswer = currentQuestion.answer;
                
                // Use regex to handle possible variations
                const correctRegex = new RegExp(`^${correctAnswer}$`);
                const isCorrect = correctRegex.test(userAnswer);
                
                if (isCorrect) {
                    // Correct answer
                    score++;
                    streak++;
                    consecutiveCorrect++;
                    maxStreak = Math.max(maxStreak, streak);
                    
                    // Update streak-dependent badges
                    updateBadges();
                    
                    $("#feedback").removeClass("incorrect").addClass("correct").text("Correct! 🎉").show();
                    $("#score").text(score);
                    $("#streak").text(streak);
                    
                    // Go to next question after a short delay
                    setTimeout(() => {
                        currentQuestionIndex++;
                        loadQuestion();
                    }, 1000);
                } else {
                    // Incorrect answer
                    streak = 0;
                    consecutiveCorrect = 0;
                    $("#streak").text(streak);
                    $("#feedback").removeClass("correct").addClass("incorrect").text(`Incorrect. The correct answer is: ${correctAnswer}`).show();
                    
                    // Go to next question after a delay
                    setTimeout(() => {
                        currentQuestionIndex++;
                        loadQuestion();
                    }, 2000);
                }
            }
            
            // Update badges based on consecutive correct answers
            function updateBadges() {
                if (consecutiveCorrect >= BRONZE_THRESHOLD && !earnedBadges.includes('bronze')) {
                    earnedBadges.push('bronze');
                    $("#bronze-badge").addClass("active").addClass("badge-animation");
                    updateEarnedBadgesDisplay();
                }
                
                if (consecutiveCorrect >= SILVER_THRESHOLD && !earnedBadges.includes('silver')) {
                    earnedBadges.push('silver');
                    $("#silver-badge").addClass("active").addClass("badge-animation");
                    updateEarnedBadgesDisplay();
                }
                
                if (consecutiveCorrect >= GOLD_THRESHOLD && !earnedBadges.includes('gold')) {
                    earnedBadges.push('gold');
                    $("#gold-badge").addClass("active").addClass("badge-animation");
                    updateEarnedBadgesDisplay();
                }
                
                if (consecutiveCorrect >= DIAMOND_THRESHOLD && !earnedBadges.includes('diamond')) {
                    earnedBadges.push('diamond');
                    $("#diamond-badge").addClass("active").addClass("badge-animation");
                    updateEarnedBadgesDisplay();
                }
            }
            
            // Update the earned badges display at the top
            function updateEarnedBadgesDisplay() {
                if (earnedBadges.length > 0) {
                    let badgesHTML = '<span class="earned-badges-title">Earned Badges:</span>';
                    
                    if (earnedBadges.includes('bronze')) {
                        badgesHTML += '<i class="fas fa-medal bronze earned-badge" title="Bronze - 5 correct in a row"></i>';
                    }
                    
                    if (earnedBadges.includes('silver')) {
                        badgesHTML += '<i class="fas fa-award silver earned-badge" title="Silver - 10 correct in a row"></i>';
                    }
                    
                    if (earnedBadges.includes('gold')) {
                        badgesHTML += '<i class="fas fa-award gold earned-badge" title="Gold - 15 correct in a row"></i>';
                    }
                    
                    if (earnedBadges.includes('diamond')) {
                        badgesHTML += '<i class="fas fa-gem diamond earned-badge" title="Diamond - 20 correct in a row"></i>';
                    }
                    
                    $("#earned-badges").html(badgesHTML);
                    
                    // Add animation to the newest badge
                    const newestBadge = earnedBadges[earnedBadges.length - 1];
                    $(`#earned-badges .${newestBadge}`).addClass("badge-animation");
                    setTimeout(() => {
                        $(`#earned-badges .${newestBadge}`).removeClass("badge-animation");
                    }, 1000);
                }
            }
            
            // End game and show results
            function endGame() {
                $("#game-area").hide();
                $("#result-container").show();
                
                // Update final score
                $("#final-score").text(`Your Score: ${score}/${questions.length}`);
                
                // Show earned badges
                let badgesEarnedHTML = '<div class="badges-summary">Badges Earned:</div>';
                
                if (earnedBadges.length === 0) {
                    badgesEarnedHTML += '<div class="no-badges">No badges earned. Try again!</div>';
                } else {
                    badgesEarnedHTML += '<div class="earned-badges-list">';
                    
                    if (earnedBadges.includes('bronze')) {
                        badgesEarnedHTML += '<i class="fas fa-medal bronze earned-badge" title="Bronze - 5 correct in a row"></i>';
                    }
                    
                    if (earnedBadges.includes('silver')) {
                        badgesEarnedHTML += '<i class="fas fa-award silver earned-badge" title="Silver - 10 correct in a row"></i>';
                    }
                    
                    if (earnedBadges.includes('gold')) {
                        badgesEarnedHTML += '<i class="fas fa-award gold earned-badge" title="Gold - 15 correct in a row"></i>';
                    }
                    
                    if (earnedBadges.includes('diamond')) {
                        badgesEarnedHTML += '<i class="fas fa-gem diamond earned-badge" title="Diamond - 20 correct in a row"></i>';
                    }
                    
                    badgesEarnedHTML += '</div>';
                }
                
                $("#badges-earned").html(badgesEarnedHTML);
            }
            
            // Event listeners
            $("#submit-btn").click(function() {
                checkAnswer();
            });
            
            $("#answer-input").keypress(function(e) {
                if (e.which === 13) { // Enter key
                    checkAnswer();
                }
            });
            
            $("#restart-btn").click(function() {
                initGame();
            });
            
            // Initialize the game
            initGame();
        });
    </script>
</body>
</html>